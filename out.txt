
> practica_web_server@1.0.0 test
> jest --forceExit

  console.log
    Servidor escuchando en el puerto 3000

      at Server.log (app.js:42:13)

  console.log
    { email: 'admin@gmail.com', password: 'Admin1234!!' }

      at log (controllers/auth.js:15:17)

  console.log
    Executing (default): SELECT 1+1 AS result

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'reviews' AND TABLE_SCHEMA = 'practica_web_server'

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    MySQL conexi√≥n correcta

      at log (config/mysql.js:21:17)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`email` = 'admin@gmail.com' LIMIT 1;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SHOW FULL COLUMNS FROM `reviews`;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)
          at async Promise.all (index 0)

  console.log
    Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'reviews' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='practica_web_server' AND REFERENCED_TABLE_NAME IS NOT NULL;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)
          at async Promise.all (index 1)

  console.log
    Executing (default): ALTER TABLE `reviews` CHANGE `score` `score` INTEGER;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `reviews` CHANGE `content` `content` VARCHAR(255);

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = 1;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `reviews` CHANGE `createdAt` `createdAt` DATETIME NOT NULL;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): INSERT INTO `users` (`id`,`name`,`age`,`email`,`password`,`role`,`city`,`accepts_offers`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): INSERT INTO `companies` (`id`,`name`,`cif`,`address`,`email`,`phone`,`owner_id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `reviews` CHANGE `updatedAt` `updatedAt` DATETIME NOT NULL;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): UPDATE `users` SET `owns_company_id`=?,`updatedAt`=? WHERE `id` = ?

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT CONSTRAINT_CATALOG AS constraintCatalog, CONSTRAINT_NAME AS constraintName, CONSTRAINT_SCHEMA AS constraintSchema, CONSTRAINT_TYPE AS constraintType, TABLE_NAME AS tableName, TABLE_SCHEMA AS tableSchema from INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE table_name='reviews' AND constraint_name = 'reviews_ibfk_361' AND TABLE_SCHEMA = 'practica_web_server';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `reviews` DROP FOREIGN KEY `reviews_ibfk_361`;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = 1;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `reviews` ADD FOREIGN KEY (`webpage_id`) REFERENCES `webpages` (`id`) ON DELETE SET NULL ON UPDATE CASCADE;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = 244;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): INSERT INTO `webpages` (`id`,`city`,`title`,`summary`,`scoring`,`scoring_count`,`company_id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT CONSTRAINT_CATALOG AS constraintCatalog, CONSTRAINT_NAME AS constraintName, CONSTRAINT_SCHEMA AS constraintSchema, CONSTRAINT_TYPE AS constraintType, TABLE_NAME AS tableName, TABLE_SCHEMA AS tableSchema from INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE table_name='reviews' AND constraint_name = 'reviews_ibfk_360' AND TABLE_SCHEMA = 'practica_web_server';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `reviews` DROP FOREIGN KEY `reviews_ibfk_360`;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `name`, `createdAt`, `updatedAt` FROM `interests` AS `interests` WHERE `interests`.`name` = 'comida';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)
          at async Promise.all (index 0)

  console.log
    Executing (default): SELECT `name`, `createdAt`, `updatedAt` FROM `interests` AS `interests` WHERE `interests`.`name` = 'bebida';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)
          at async Promise.all (index 1)

  console.log
    Executing (default): SELECT `name`, `createdAt`, `updatedAt` FROM `interests` AS `interests` WHERE `interests`.`name` = 'pizza';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)
          at async Promise.all (index 2)

  console.log
    Executing (default): INSERT INTO `interests` (`name`,`createdAt`,`updatedAt`) VALUES (?,?,?);

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)
          at async Promise.all (index 2)

  console.log
    Executing (default): ALTER TABLE `reviews` ADD FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `interestName`, `webpageId` FROM `webpage_interests` AS `webpage_interests` WHERE `webpage_interests`.`webpageId` = 66 AND `webpage_interests`.`interestName` IN ('comida', 'bebida', 'pizza');

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): INSERT INTO `webpage_interests` (`interestName`,`webpageId`) VALUES ('comida',66),('bebida',66),('pizza',66);

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)
          at async Promise.all (index 0)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = 244;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SHOW INDEX FROM `reviews`

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): INSERT INTO `users` (`id`,`name`,`age`,`email`,`password`,`role`,`city`,`accepts_offers`,`owns_company_id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?);

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'users' AND TABLE_SCHEMA = 'practica_web_server'

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SHOW FULL COLUMNS FROM `users`;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)
          at async Promise.all (index 0)

  console.log
    Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='practica_web_server' AND REFERENCED_TABLE_NAME IS NOT NULL;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)
          at async Promise.all (index 1)

  console.log
    Executing (default): ALTER TABLE `users` CHANGE `name` `name` VARCHAR(255) NOT NULL;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `users` CHANGE `age` `age` INTEGER;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `users` CHANGE `email` `email` VARCHAR(255) NOT NULL;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): INSERT INTO `users` (`id`,`name`,`age`,`email`,`password`,`role`,`city`,`accepts_offers`,`owns_company_id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?);

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `users` CHANGE `password` `password` VARCHAR(255) NOT NULL;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = 245;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `users` CHANGE `role` `role` ENUM('user', 'merchant', 'admin') DEFAULT 'user';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = 245;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `users` CHANGE `city` `city` VARCHAR(255) NOT NULL;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `id`, `city`, `title`, `summary`, `scoring`, `scoring_count`, `company_id`, `createdAt`, `updatedAt`, `companyId` FROM `webpages` AS `webpage`;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `users` CHANGE `accepts_offers` `accepts_offers` TINYINT(1) DEFAULT true;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `id`, `city`, `title`, `summary`, `scoring`, `scoring_count`, `company_id`, `createdAt`, `updatedAt`, `companyId` FROM `webpages` AS `webpage` WHERE `webpage`.`city` = 'Malaga';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = 1;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT CONSTRAINT_CATALOG AS constraintCatalog, CONSTRAINT_NAME AS constraintName, CONSTRAINT_SCHEMA AS constraintSchema, CONSTRAINT_TYPE AS constraintType, TABLE_NAME AS tableName, TABLE_SCHEMA AS tableSchema from INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE table_name='users' AND constraint_name = 'users_ibfk_1' AND TABLE_SCHEMA = 'practica_web_server';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `users` DROP FOREIGN KEY `users_ibfk_1`;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = 1;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): ALTER TABLE `users` ADD FOREIGN KEY (`owns_company_id`) REFERENCES `companies` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Entro en las pruebas

      at log (middleware/pruebas.js:7:17)

  console.log
    ENTRO DELETE

      at log (controllers/users.js:101:17)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '245';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    llego a destroy()

      at log (controllers/users.js:132:17)

  console.log
    result

      at log (controllers/users.js:134:17)

  console.log
    Promise { <pending> }

      at log (controllers/users.js:135:17)

  console.log
    Executing (default): DELETE FROM `users` WHERE `id` = 245

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    JsonWebTokenError {
      name: 'JsonWebTokenError',
      message: 'jwt malformed'
    }

      at log (utils/handleJwt.js:29:17)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = 246;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Entro en las pruebas

      at log (middleware/pruebas.js:7:17)

  console.log
    ENTRO DELETE

      at log (controllers/users.js:101:17)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '246';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    llego a destroy()

      at log (controllers/users.js:132:17)

  console.log
    result

      at log (controllers/users.js:134:17)

  console.log
    Promise { <pending> }

      at log (controllers/users.js:135:17)

  console.log
    Executing (default): DELETE FROM `users` WHERE `id` = 246

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = 244;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    Entro en las pruebas

      at log (middleware/pruebas.js:7:17)

  console.log
    ENTRO DELETE

      at log (controllers/users.js:101:17)

  console.log
    Executing (default): SELECT `id`, `name`, `age`, `email`, `password`, `role`, `city`, `accepts_offers`, `owns_company_id`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '244';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

  console.log
    llego a destroy()

      at log (controllers/users.js:132:17)

  console.log
    result

      at log (controllers/users.js:134:17)

  console.log
    Promise { <pending> }

      at log (controllers/users.js:135:17)

  console.log
    Executing (default): DELETE FROM `users` WHERE `id` = 244

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1280:15)

FAIL test/app.test.js
  Admin
    ‚úì should login as admin (198 ms)
    ‚úì should NOT register a new merchant (40 ms)
    ‚úì should register a new merchant from the admin user (127 ms)
  Merchant
    ‚úì should NOT register a new webpage. Only a merchant can register his own webpage (10 ms)
    ‚úï should register a new webpage from merchant created above (161 ms)
    ‚úï should modify the webpage from merchant created above (10 ms)
  User
    ‚úì should register a basic user (89 ms)
    ‚úì should NOT register a basic user. Password is insecure and no email provided (12 ms)
    ‚úì should register another basic user. (106 ms)
    ‚úï should create a review from user1 in the webpage created above (22 ms)
    ‚úï should create another review from user2 in the webpage created above with content (16 ms)
  Webpage
    ‚úì should get all webpages (8 ms)
    ‚úï should get the webpage created above, which should have a review scoring of 3 and a review count of 2 (6 ms)
    ‚úì should get all webpages from Malaga (at least 1) (6 ms)
  Deletes
    ‚úì should NEVER delete an admin (16 ms)
    ‚úì should delete user1 from admin (34 ms)
    ‚úì should NOT delete user from merchant (9 ms)
    ‚úì should delete user2 from himself (12 ms)
    ‚úì should delete merchant from himself (11 ms)

  ‚óè Merchant ‚Ä∫ should register a new webpage from merchant created above

    expect(received).toEqual(expected) // deep equality

    Expected: "Madrid"
    Received: undefined

      117 |             .expect(200)
      118 |
    > 119 |             expect(response.body.city).toEqual('Madrid');
          |                                        ^
      120 |
      121 |             webpage_id = response.body.id
      122 |     });

      at Object.toEqual (test/app.test.js:119:40)

  ‚óè Merchant ‚Ä∫ should modify the webpage from merchant created above

    expected 200 "OK", got 403 "Forbidden"

      130 |             })
      131 |             .set('Accept', 'application/json')
    > 132 |             .expect(200)
          |              ^
      133 |
      134 |             expect(response.body.city).toEqual('Malaga');
      135 |

      at Object.expect (test/app.test.js:132:14)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè User ‚Ä∫ should create a review from user1 in the webpage created above

    expected 200 "OK", got 403 "Forbidden"

      211 |             })
      212 |             .set('Accept', 'application/json')
    > 213 |             .expect(200)
          |              ^
      214 |
      215 |             expect(response.text).toBeDefined();
      216 |

      at Object.expect (test/app.test.js:213:14)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè User ‚Ä∫ should create another review from user2 in the webpage created above with content

    expected 200 "OK", got 403 "Forbidden"

      227 |             })
      228 |             .set('Accept', 'application/json')
    > 229 |             .expect(200)
          |              ^
      230 |
      231 |             expect(response.text).toBeDefined();
      232 |

      at Object.expect (test/app.test.js:229:14)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Webpage ‚Ä∫ should get the webpage created above, which should have a review scoring of 3 and a review count of 2

    expected 200 "OK", got 403 "Forbidden"

      249 |             .get('/api/webpages/id/' + webpage_id)
      250 |             .set('Accept', 'application/json')
    > 251 |             .expect(200)
          |              ^
      252 |
      253 |             expect(response.body.scoring).toEqual(3)
      254 |             expect(response.body.scoring_count).toEqual(2)

      at Object.expect (test/app.test.js:251:14)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

Test Suites: 1 failed, 1 total
Tests:       5 failed, 14 passed, 19 total
Snapshots:   0 total
Time:        2.57 s, estimated 3 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
